 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
        console.log(origin);
        res.setHeader('Access-Control-Allow-Origin', origin);
        res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/:time')
    .get(function(req, res) {
      if (new Date(req.params.time).toString() !== 'Invalid Date') {
        res.end(JSON.stringify(parseDate(req.params.time)));
      }
		  res.end(null)
    })

var monthsArr = ["January", "February", "March", "April", 
                "May", "June", "July", "August", "September",
                "October", "November", "December"];

function parseDate(date) {
    if (date.match(/^[0-9]+$/)) {
      date = parseInt(date);
    }
    let d = new Date(date);
    let month = monthsArr[d.getMonth()];
    let day = d.getDate();
    let year = d.getFullYear();
    let dateHuman = `${month} ${day}, ${year}`;
    let dateUnix = (d.getTime()/1000).toFixed(0);
    return {'unix': dateUnix, 'natural': dateHuman}
}

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

